# 튜플
## 튜플의 특징
## - 시퀀스 자료형
## - 수정, 추가 삭제가 불가능한 리스트
## - 효율적인 메모리 사용
## - 읽기만 가능하므로 데이터 손실 우려 없음

## 튜플 만들기
### [튜플] = (데이터1, 데이터2, ...)
### [튜플] = 데이터1, 데이터2, ... # 소괄호 생략 가능
### 유의사항
### - 여러 자료형 한 번에 담기 가능
### - 하나의 데이터만 넣을 때는 맨 뒤에 ,를 붙여줘야 함 ex. a = 30 (x) a = (30,) 혹은 a = 30,
tuple1 = 3, 4, 5
tuple2 = 3,

## 튜플 <-> 리스트, range
### ex.
### a = tuple([5, 6, 7])
### a = tuple(list(range(10)))
### a = list(5, 6, 7)
tuple3 =([3, 4, 5])
list1 = list(range(10))
tuple4 = list(list1)

tuple5 = 3, 4, 5
list2 = list(tuple5)

## 패킹과 언패킹 - 리스트에서도 가능함
### 패킹: 여러 개의 데이터를 하나의 변수에 할당하는 것
### - ex. numbers = 3, 4, 5
### 언패킹: 컬렉션의 각 데이터를 각각의 변수에 할당하는 것
### - ex a, b, c = numbers
### cf. 튜플의 패킹, 언패킹을 이용해서 swap 가능

## 튜플 함수
### 특정 값의 인덱스: [tuple 변수].index([인덱스를 찾으려는 값])
### 특정 값의 개수: [tuple 변수].count([개수를 찾으려는 값])
tuple6 = 5, 6, 7, 8, 5
print(tuple6.index(5)) # 앞에서부터 검색하여 가장 앞의 인덱스를 반환함
print(tuple6.count(5))

### cf. 시퀀스 자료형에서 쓸 수 있는 함수들
### 최댓값, 최솟값: max([시퀀스 변수]), min([시퀀스 변수])
### 합계: sum([시퀀스 변수])
print(max(tuple6))
print(min(tuple6))

list3 = [1, 1, 2]
print(min(list3))
print(sum(list3))
